<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hassium</name>
    </assembly>
    <members>
        <member name="T:Hassium.Engine.HassiumEngine">
            <summary>
            Class that contains engine for running hassium code from source.
            </summary>
        </member>
        <member name="P:Hassium.Engine.HassiumEngine.Interpreter">
            <summary>
            Interpreter instance.
            </summary>
        </member>
        <member name="M:Hassium.Engine.HassiumEngine.#ctor(System.Boolean)">
            <summary>
            Initializes new engine with parameter to force the need for a main() function.
            </summary>
            <param name="forceMain"></param>
        </member>
        <member name="M:Hassium.Engine.HassiumEngine.#ctor(Hassium.Interpreter.Interpreter)">
            <summary>
            Initializes new engine with parameter of an existing Interpreter.
            </summary>
            <param name="interpreter"></param>
        </member>
        <member name="M:Hassium.Engine.HassiumEngine.RunString(System.String)">
            <summary>
            Executes source code.
            </summary>
            <param name="source">Source code to execute</param>
        </member>
        <member name="M:Hassium.Engine.HassiumEngine.AddGlobalAttribute(System.String,Hassium.HassiumObjects.HassiumObject)">
            <summary>
            Adds a global attribute to the current Hassium instance.
            </summary>
            <param name="name"></param>
            <param name="hassiumObject"></param>
        </member>
        <member name="M:Hassium.Engine.HassiumEngine.CheckGlobalAttribute(System.String)">
            <summary>
            Returns true if the attribute is found in the global attributes.
            </summary>
            <param name="name">Attribute name to check.</param>
            <returns></returns>
        </member>
        <member name="M:Hassium.Engine.HassiumEngine.SetGlobalAttribute(System.String,Hassium.HassiumObjects.HassiumObject)">
            <summary>
            Changes the value of a global attribute
            </summary>
            <param name="name">Attribute name.</param>
            <param name="hassiumObject">Value.</param>
        </member>
        <member name="T:Hassium.Functions.Constructors">
            <summary>
            Class containing global constructors.
            </summary>
        </member>
        <member name="M:Hassium.Functions.Constructors.Object(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a blank HassiumObject.
            </summary>
            <param name="args"></param>
            <returns>HassiumObject</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.Date(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new HassiumDate.
            </summary>
            <param name="args"></param>
            <returns>HassiumDate.</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.Array(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new array.
            </summary>
            <param name="args"></param>
            <returns>HassiumArray</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.Random(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new HassiumRandom.
            </summary>
            <param name="args"></param>
            <returns>HassiumRandom</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.Event(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new Event.
            </summary>
            <param name="args"></param>
            <returns>HassiumEvent</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.StopWatch(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new HassiumStopWatch.
            </summary>
            <param name="args"></param>
            <returns>HassiumStopWatch</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.String(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new HassiumString.
            </summary>
            <param name="args"></param>
            <returns>HassiumString</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.Char(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new HassiumChar.
            </summary>
            <param name="args"></param>
            <returns>HassiumChar</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.Int(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new HassiumInt.
            </summary>
            <param name="args"></param>
            <returns>HassiumInt</returns>
        </member>
        <member name="M:Hassium.Functions.Constructors.Double(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a new HassiumDouble.
            </summary>
            <param name="args"></param>
            <returns>HassiumDouble</returns>
        </member>
        <member name="T:Hassium.Functions.SystemFunctions">
            <summary>
            Class of global functions for interacting with the system.
            </summary>
        </member>
        <member name="M:Hassium.Functions.SystemFunctions.System(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Executes a binary with arguments.
            </summary>
            <param name="args"></param>
            <returns>Result.</returns>
        </member>
        <member name="M:Hassium.Functions.SystemFunctions.Date(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns the current HassiumDate
            </summary>
            <param name="args"></param>
            <returns>HassiumDate</returns>
        </member>
        <member name="M:Hassium.Functions.SystemFunctions.DateParse(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns a HassiumDateTime from a date string.
            </summary>
            <param name="args"></param>
            <returns>HassiumDate</returns>
        </member>
        <member name="M:Hassium.Functions.SystemFunctions.Time(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns the current HassiumType.
            </summary>
            <param name="args"></param>
            <returns>HassiumTime</returns>
        </member>
        <member name="M:Hassium.Functions.SystemFunctions.CurrentUser(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns the current logged on user.
            </summary>
            <param name="args"></param>
            <returns>HassiumString</returns>
        </member>
        <member name="M:Hassium.Functions.SystemFunctions.Sleep(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Pauses the current thread for a specified amount of time.
            </summary>
            <param name="args"></param>
            <returns>Null</returns>
        </member>
        <member name="M:Hassium.Functions.SystemFunctions.sizeOf(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns the size of a HassiumObject.
            </summary>
            <param name="args"></param>
            <returns>Size</returns>
        </member>
        <member name="M:Hassium.Functions.SystemFunctions.nameOf(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns the name of a HassiumObject.
            </summary>
            <param name="args"></param>
            <returns>HassiumString</returns>
        </member>
        <member name="T:Hassium.Functions.HassiumFunctionDelegate">
            <summary>
            Delegate for HassiumFunctions.
            </summary>
            <param name="arguments"></param>
            <returns>Return from function.</returns>
        </member>
        <member name="T:Hassium.Functions.InternalFunction">
            <summary>
            Class that defines a Hassium function.
            </summary>
        </member>
        <member name="P:Hassium.Functions.InternalFunction.IsStatic">
            <summary>
            Determines if the function is static.
            </summary>
        </member>
        <member name="M:Hassium.Functions.InternalFunction.#ctor(Hassium.Functions.HassiumFunctionDelegate,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new InternalFunction using the target args, prop, constr, and stati.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
            <param name="prop"></param>
            <param name="constr"></param>
            <param name="stati"></param>
        </member>
        <member name="M:Hassium.Functions.InternalFunction.#ctor(Hassium.Functions.HassiumFunctionDelegate,System.Int32[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new InternalFunction using the target args, prop, constr, and stati.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
            <param name="prop"></param>
            <param name="constr"></param>
            <param name="stati"></param>
        </member>
        <member name="P:Hassium.Functions.InternalFunction.IsProperty">
            <summary>
            Determines if function is a property.
            </summary>
        </member>
        <member name="P:Hassium.Functions.InternalFunction.IsConstructor">
            <summary>
            Determines if function is a constructor.
            </summary>
        </member>
        <member name="P:Hassium.Functions.InternalFunction.Arguments">
            <summary>
            The number of arguments for the function.
            </summary>
        </member>
        <member name="M:Hassium.Functions.InternalFunction.ToString">
            <summary>
            Returns a string representation of the function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hassium.Functions.InternalFunction.Invoke(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Invokes the function.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Hassium.Functions.IntFunc">
            <summary>
            Class for internal function attribute.
            </summary>
        </member>
        <member name="P:Hassium.Functions.IntFunc.Name">
            <summary>
            Function name.
            </summary>
        </member>
        <member name="P:Hassium.Functions.IntFunc.Alias">
            <summary>
            Function alias.
            </summary>
        </member>
        <member name="P:Hassium.Functions.IntFunc.Constructor">
            <summary>
            Determines if the function is a constructor.
            </summary>
        </member>
        <member name="P:Hassium.Functions.IntFunc.Arguments">
            <summary>
            The number of arguments for the function.
            </summary>
        </member>
        <member name="M:Hassium.Functions.IntFunc.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new IntFunc with the name and args.
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Hassium.Functions.IntFunc.#ctor(System.String,System.Int32[])">
            <summary>
            Initializes a new IntFunc with the name and args.
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Hassium.Functions.IntFunc.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new IntFunc with the name, args, and alias.
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Hassium.Functions.IntFunc.#ctor(System.String,System.Int32[],System.String)">
            <summary>
            Initializes a new IntFunc with the name, args, and alias.
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Hassium.Functions.IntFunc.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new IntFunc with the name, constr, and args.
            </summary>
            <param name="name"></param>
            <param name="constr"></param>
            <param name="args"></param>
        </member>
        <member name="M:Hassium.Functions.IntFunc.#ctor(System.String,System.Boolean,System.Int32[])">
            <summary>
            Initializes a new IntFunc with the name, constr, and args.
            </summary>
            <param name="name"></param>
            <param name="constr"></param>
            <param name="args"></param>
        </member>
        <member name="T:Hassium.Functions.ILibrary">
            <summary>
            Interface that all global class libraries must implement.
            </summary>
        </member>
        <member name="T:Hassium.Functions.ConsoleFunctions">
            <summary>
            Class of global functions for interacting with the console.
            </summary>
        </member>
        <member name="M:Hassium.Functions.ConsoleFunctions.Print(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Prints the specified string to the console.
            </summary>
            <param name="args">The string to print.</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Hassium.Functions.ConsoleFunctions.PrintLn(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Prints the specified string to the console (see <c>Print</c>) followed by a newline.
            </summary>
            <param name="args">The string to print.</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Hassium.Functions.ConsoleFunctions.PrintArr(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Prints the specified array to the console followed by a newline.
            </summary>
            <param name="args">The array to print.</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Hassium.Functions.ConsoleFunctions.Input(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Prompt the user to type something and return the input.
            </summary>
            <param name="args">No parameters.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Hassium.Functions.ConsoleFunctions.Cls(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Clears the console.
            </summary>
            <param name="args">No parameters.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Hassium.Functions.ConsoleFunctions.Pause(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Waits for the user to press any key.
            </summary>
            <param name="args">No parameters.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Hassium.Functions.MiscFunctions">
            <summary>
            Class containing misc global functions.
            </summary>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.VarExists(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns true if the variable exists in the current context.
            </summary>
            <param name="args"></param>
            <returns>HassiumBool</returns>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.Type(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns the type of object something is.
            </summary>
            <param name="args"></param>
            <returns>HassiumType</returns>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.Throw(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Throws an exception.
            </summary>
            <param name="args"></param>
            <returns>Null</returns>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.Fill(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Fills an array with nothing.
            </summary>
            <param name="args"></param>
            <returns>HassiumArray</returns>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.FillZero(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Flils an array with zeros.
            </summary>
            <param name="args"></param>
            <returns>HassiumArray</returns>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.Range(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Returns an enumerable of a range for use in foreach.
            </summary>
            <param name="args"></param>
            <returns>HassiumArray</returns>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.Map(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Applies a function to each element in an array.
            </summary>
            <param name="args"></param>
            <returns>HassiumArray</returns>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.threadRun(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Runs a function on a new thread.
            </summary>
            <param name="args"></param>
            <returns>Null</returns>
        </member>
        <member name="M:Hassium.Functions.MiscFunctions.RuntimeCall(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Calls a method on the .NET runtime.
            </summary>
            <param name="args"></param>
            <returns>HassiumObject</returns>
        </member>
        <member name="T:Hassium.HassiumObjects.HassiumInstanceFunctionDelegate">
            <summary>
            Delegate for a HassiumInstance.
            </summary>
            <param name="self"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Hassium.HassiumObjects.HassiumProperty">
            <summary>
            Class for a HassiumProperty.
            </summary>
        </member>
        <member name="F:Hassium.HassiumObjects.HassiumProperty.SetValue">
            <summary>
            Delegate for set.
            </summary>
        </member>
        <member name="F:Hassium.HassiumObjects.HassiumProperty.GetValue">
            <summary>
            Delegatae for get.
            </summary>
        </member>
        <member name="F:Hassium.HassiumObjects.HassiumProperty.Name">
            <summary>
            Name of property.
            </summary>
        </member>
        <member name="F:Hassium.HassiumObjects.HassiumProperty.ReadOnly">
            <summary>
            Returns if property is read-only.
            </summary>
        </member>
        <member name="M:Hassium.HassiumObjects.HassiumProperty.#ctor(System.String,Hassium.Functions.HassiumFunctionDelegate,Hassium.HassiumObjects.HassiumInstanceFunctionDelegate,System.Boolean)">
            <summary>
            Initializes a new HassiumProperty using the name, get, set, and optional ro values.
            </summary>
            <param name="name"></param>
            <param name="get"></param>
            <param name="set"></param>
            <param name="ro"></param>
        </member>
        <member name="M:Hassium.HassiumObjects.HassiumProperty.Invoke(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Overrides the invoke to return get.
            </summary>
            <param name="args"></param>
            <returns>HassiumObject return value.</returns>
        </member>
        <member name="M:Hassium.HassiumObjects.IO.HassiumConsole.SetForeground(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Sets the console foreground color.
            </summary>
            <param name="args">
                The color to apply. Can be :
                <list type="bullet">
                    <item>
                        <term>
                            <c>black</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>blue</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkBlue</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>green</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkGreen</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>red</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkRed</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>magenta</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkMagenta</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>yellow</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkYellow</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>gray</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkGray</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>cyan</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkCyan</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>white</c>
                        </term>
                    </item>
                </list>
            </param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Hassium.HassiumObjects.IO.HassiumConsole.SetBackground(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Sets the console background color.
            </summary>
            <param name="args">
                The color to apply. Can be :
                <list type="bullet">
                    <item>
                        <term>
                            <c>black</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>blue</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkBlue</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>green</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkGreen</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>red</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkRed</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>magenta</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkMagenta</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>yellow</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkYellow</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>gray</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkGray</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>cyan</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkCyan</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>white</c>
                        </term>
                    </item>
                </list>
            </param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Hassium.HassiumObjects.IO.HassiumConsole.GetForeground(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Gets the console foreground color.
            </summary>
            <param name="args">No parameters</param>
            <returns>
                The current foreground color. Can be :
                <list type="bullet">
                    <item>
                        <term>
                            <c>black</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>blue</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkBlue</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>green</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkGreen</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>red</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkRed</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>magenta</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkMagenta</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>yellow</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkYellow</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>gray</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkGray</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>cyan</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkCyan</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>white</c>
                        </term>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:Hassium.HassiumObjects.IO.HassiumConsole.GetBackground(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
                Gets the console background color.
            </summary>
            <param name="args">No parameters</param>
            <returns>
                The current background color. Can be :
                <list type="bullet">
                    <item>
                        <term>
                            <c>black</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>blue</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkBlue</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>green</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkGreen</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>red</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkRed</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>magenta</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkMagenta</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>yellow</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkYellow</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>gray</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkGray</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>cyan</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>darkCyan</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>white</c>
                        </term>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:Hassium.HassiumObjects.IO.HassiumFile.#ctor">
            public bool Exists { get { return File.Exists(FilePath); } }
        </member>
        <member name="T:Hassium.Interpreter.CallStack">
            <summary>
            Class containing the call stack.
            </summary>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.Peek">
            <summary>
            Returns the top StackFrame.
            </summary>
            <returns>StackFrame</returns>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.Push(Hassium.Interpreter.StackFrame)">
            <summary>
            Pushes a StackFrame to the call stack.
            </summary>
            <param name="st"></param>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.Any">
            <summary>
            Returns true if the call stack is not empty.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.Pop">
            <summary>
            Pops the top StackFrame off.
            </summary>
            <returns>StackFrame</returns>
        </member>
        <member name="P:Hassium.Interpreter.CallStack.ReturnValue">
            <summary>
            The return value of a Hassium Function.
            </summary>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.GetVariable(System.String,System.Boolean)">
            <summary>
            Returns the value from a variable name.
            </summary>
            <param name="name"></param>
            <param name="st"></param>
            <returns>HassiumObject</returns>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.GetLocals(System.Boolean)">
            <summary>
            Returns a dictionary containing all the local variables and their names.
            </summary>
            <param name="all"></param>
            <returns></returns>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.SetVariable(System.String,Hassium.HassiumObjects.HassiumObject)">
            <summary>
            Sets a variable at name to value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.FreeVariable(System.String,System.Boolean)">
            <summary>
            Frees a variable off the call stack.
            </summary>
            <param name="name"></param>
            <param name="st"></param>
        </member>
        <member name="M:Hassium.Interpreter.CallStack.HasVariable(System.String,System.Boolean)">
            <summary>
            Returns true if the variable exists in the current context.
            </summary>
            <param name="name"></param>
            <param name="st"></param>
            <returns>bool</returns>
        </member>
        <member name="T:Hassium.Interpreter.IVisitor">
            <summary>
            Interface the interpreter must implement for the visitor pattern.
            </summary>
        </member>
        <member name="T:Hassium.Interpreter.ParseException">
            <summary>
            Class for parsing exceptions.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.ParseException.Node">
            <summary>
            The node the exception is on.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.ParseException.Position">
            <summary>
            The position in the code the exception is on.
            </summary>
        </member>
        <member name="M:Hassium.Interpreter.ParseException.#ctor(System.String,Hassium.Parser.AstNode)">
            <summary>
            Initializes a new ParseException using the message and node.
            </summary>
            <param name="message"></param>
            <param name="node"></param>
        </member>
        <member name="M:Hassium.Interpreter.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new ParseException using the message and position.
            </summary>
            <param name="message"></param>
            <param name="position"></param>
        </member>
        <member name="T:Hassium.Interpreter.ExitEventHandler">
            <summary>
            The delegate for handling an interpreter exit.
            </summary>
            <param name="code"></param>
        </member>
        <member name="T:Hassium.Interpreter.Interpreter">
            <summary>
            Class for a Hassium Interpreter.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.Interpreter.CallStack">
            <summary>
            The CallStack.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.Interpreter.Globals">
            <summary>
            Dictionary of the global variables.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.Interpreter.Constants">
            <summary>
            Dictionary for constants such as true, false, Convert, Console, Information, and null.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.Interpreter.Code">
            <summary>
            The Abstract Syntax Tree.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.Interpreter.SymbolTable">
            <summary>
            The SymbolTable for the Interpreter.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.Interpreter.HandleErrors">
            <summary>
            Determines if Interpreter handles exceptions thrown.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.Interpreter.ReturnFunc">
            <summary>
            Determines if interpreter is handling a return statement.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.Interpreter.IsInFunction">
            <summary>
            Determines if interpreter is running a function.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.Interpreter.Exitcode">
            <summary>
            The exit code.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.Interpreter.NodePos">
            <summary>
            A Stack object containing the position inside an AST Node.
            </summary>
        </member>
        <member name="M:Hassium.Interpreter.Interpreter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Hassium.Interpreter.Interpreter" /> class.
            </summary>
        </member>
        <member name="M:Hassium.Interpreter.Interpreter.#ctor(Hassium.Semantics.SymbolTable,Hassium.Parser.AstNode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Hassium.Interpreter.Interpreter" /> class.
            </summary>
            <param name="symbolTable"></param>
            <param name="code"></param>
            <param name="forcemain"></param>
        </member>
        <member name="P:Hassium.Interpreter.Interpreter.BuildDate">
            <summary>
            The build date of the interpreter.
            </summary>
        </member>
        <member name="M:Hassium.Interpreter.Interpreter.Execute(System.Boolean)">
            <summary>
            Begins executing the code.
            </summary>
            <param name="repl"></param>
        </member>
        <member name="M:Hassium.Interpreter.Interpreter.SetVariable(System.String,Hassium.HassiumObjects.HassiumObject,Hassium.Parser.AstNode,System.Boolean,System.Boolean)">
            <summary>
            Sets a variable to a value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="node"></param>
            <param name="forceglobal"></param>
            <param name="onlyexist"></param>
        </member>
        <member name="M:Hassium.Interpreter.Interpreter.GetFunctions(System.String)">
            <summary>
                Gets the functions.
            </summary>
            <returns>The functions.</returns>
            <param name="path">Path.</param>
        </member>
        <member name="M:Hassium.Interpreter.Interpreter.interpretBinaryOp(System.Object,System.Object,Hassium.Parser.Ast.BinaryOperation,System.Int32)">
            <summary>
                Interprets a binary op
            </summary>
            <param name="left">The left-hand parameter</param>
            <param name="right">The right-hand parameter</param>
            <param name="_op">The operation type</param>
            <param name="pos">position</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Hassium.Interpreter.Interpreter.interpretUnaryOp(Hassium.Parser.Ast.UnaryOpNode)">
            <summary>
                Interprets the unary op.
            </summary>
            <returns>The unary op.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Hassium.Interpreter.Interpreter.HasVariable(System.String,System.Boolean)">
            <summary>
            Returns if the variable name exist in the current context.
            </summary>
            <param name="name"></param>
            <param name="onlyglobal"></param>
            <returns></returns>
        </member>
        <member name="T:Hassium.Interpreter.StackFrame">
            <summary>
            Class for the StackFrame.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.StackFrame.Self">
            <summary>
            Implements 'this'.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.StackFrame.Scope">
            <summary>
            The LocalScope the stack frame is in.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.StackFrame.Locals">
            <summary>
            Dictionary containing the local variables.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.StackFrame.Labels">
            <summary>
            Dictionary containing the labels.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.StackFrame.ReturnValue">
            <summary>
            The return value.
            </summary>
        </member>
        <member name="M:Hassium.Interpreter.StackFrame.#ctor(Hassium.Semantics.LocalScope,Hassium.HassiumObjects.HassiumObject)">
            <summary>
            Initializes a new StackFrame using the scope and optional self.
            </summary>
            <param name="scope"></param>
            <param name="self"></param>
        </member>
        <member name="T:Hassium.Interpreter.HassiumMethod">
            <summary>
            Class for a HassiumMethod.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.HassiumMethod.SelfReference">
            <summary>
            Implements 'this'.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.HassiumMethod.Interpreter">
            <summary>
            The interpreter being used.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.HassiumMethod.LocalScope">
            <summary>
            The local scope.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.HassiumMethod.FuncNode">
            <summary>
            The AST Node.
            </summary>
        </member>
        <member name="F:Hassium.Interpreter.HassiumMethod.stackFrame">
            <summary>
            The stack frame.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.HassiumMethod.Name">
            <summary>
            Returns the name of the FuncNode.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.HassiumMethod.IsLambda">
            <summary>
            Returns if function is a lambda.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.HassiumMethod.IsStatic">
            <summary>
            Returns if function is static.
            </summary>
        </member>
        <member name="P:Hassium.Interpreter.HassiumMethod.IsConstructor">
            <summary>
            Returns if function is a constructor
            </summary>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.#ctor(Hassium.Interpreter.Interpreter,Hassium.Parser.Ast.FuncNode,Hassium.Semantics.LocalScope,Hassium.HassiumObjects.HassiumObject,System.Boolean)">
            <summary>
            Initializes a new HassiumMethod using the interpreter, funcNode, localScope, self, and optional lambda.
            </summary>
            <param name="interpreter"></param>
            <param name="funcNode"></param>
            <param name="localScope"></param>
            <param name="self"></param>
            <param name="lambda"></param>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.#ctor(Hassium.Interpreter.Interpreter,Hassium.Parser.Ast.FuncNode,Hassium.Interpreter.StackFrame,Hassium.HassiumObjects.HassiumObject,System.Boolean)">
            <summary>
            Initializes a new HassiumMethod using the interpreter, funcNode, stackFrame, self, and optional lambda.
            </summary>
            <param name="interpreter"></param>
            <param name="funcNode"></param>
            <param name="stackFrame"></param>
            <param name="self"></param>
            <param name="lambda"></param>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.op_Implicit(Hassium.Interpreter.HassiumMethod)~Hassium.HassiumObjects.Types.HassiumEventHandler">
            <summary>
            Invokes a HassiumEventHandler.
            </summary>
            <param name="mt"></param>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.Invoke(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Invokes a Hassium Function.
            </summary>
            <param name="args"></param>
            <returns>HassiumObject return value.</returns>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.ToString">
            <summary>
            Returns a string representation of the HassiumMethod.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.GetFuncVoid(Hassium.HassiumObjects.HassiumObject)">
            <summary>
                Converts an <see cref="T:Hassium.Lexer.IFunction" /> to a <see cref="T:System.Func`1" />
            </summary>
            <param name="internalFunction">The <see cref="T:Hassium.Lexer.IFunction" /> to convert</param>
            <returns>The resulting <see cref="T:System.Func`1" /></returns>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.GetFunc1(Hassium.HassiumObjects.HassiumObject)">
            <summary>
                Converts an <see cref="T:Hassium.Lexer.IFunction" /> to a <see typeref="Func" /> &lt;<see cref="T:Hassium.HassiumObjects.HassiumObject" />,
                <see cref="T:Hassium.HassiumObjects.HassiumObject" />&gt;
            </summary>
            <param name="internalFunction">The <see cref="T:Hassium.Lexer.IFunction" /> to convert</param>
            <returns>The resulting <see cref="T:System.Func`2" /></returns>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.GetFunc1Arr(Hassium.HassiumObjects.HassiumObject)">
            <summary>
                Converts an <see cref="T:Hassium.Lexer.IFunction" /> to a <see cref="T:Func{HassiumArray, HassiumObject}" />
            </summary>
            <param name="internalFunction">The <see cref="T:Hassium.Lexer.IFunction" /> to convert</param>
            <returns>The resulting <see cref="T:System.Func`1" /></returns>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.GetFunc2(Hassium.HassiumObjects.HassiumObject)">
            <summary>
                Converts an <see cref="T:Hassium.Lexer.IFunction" /> to a <see cref="T:System.Func`3" />
            </summary>
            <param name="internalFunction">The <see cref="T:Hassium.Lexer.IFunction" /> to convert</param>
            <returns>The resulting <see cref="T:System.Func`3" /></returns>
        </member>
        <member name="M:Hassium.Interpreter.HassiumMethod.GetFunc3(Hassium.HassiumObjects.HassiumObject)">
            <summary>
                Converts an <see cref="T:Hassium.Lexer.IFunction" /> to a
                <see cref="T:System.Func`4" />
            </summary>
            <param name="internalFunction">The <see cref="T:Hassium.Lexer.IFunction" /> to convert</param>
            <returns>The resulting <see cref="T:System.Func`4" /></returns>
        </member>
        <member name="T:Hassium.Lexer.IFunction">
            <summary>
            Interface for functions.
            </summary>
        </member>
        <member name="M:Hassium.Lexer.IFunction.Invoke(Hassium.HassiumObjects.HassiumObject[])">
            <summary>
            Must have an Invoke method that takes an array of args and has a return value.
            </summary>
            <param name="args"></param>
            <returns>HassiumObject</returns>
        </member>
        <member name="T:Hassium.Lexer.TokenType">
            <summary>
            Enum that contains all the different token types.
            </summary>
        </member>
        <member name="T:Hassium.Lexer.Token">
            <summary>
            Class for a Token.
            </summary>
        </member>
        <member name="P:Hassium.Lexer.Token.TokenClass">
            <summary>
            The TokenType.
            </summary>
        </member>
        <member name="P:Hassium.Lexer.Token.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:Hassium.Lexer.Token.Position">
            <summary>
            The position in the code the token is in.
            </summary>
        </member>
        <member name="M:Hassium.Lexer.Token.#ctor(Hassium.Lexer.TokenType,System.Object,System.Int32)">
            <summary>
            Initializes a new Token using the type, value, and pos.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Hassium.Lexer.Token.ToString">
            <summary>
            Returns the value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hassium.Lexer.Lexer">
            <summary>
            Class for a Lexer to tokenize source code.
            </summary>
        </member>
        <member name="M:Hassium.Lexer.Lexer.#ctor(System.String)">
            <summary>
            Initializes a new lexer using the code.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Hassium.Lexer.Lexer.Minimize(System.String)">
            <summary>
            Static method that 'golf's source code to remove unnessecary whitespace.
            </summary>
            <param name="code"></param>
            <returns>Golfed code.</returns>
        </member>
        <member name="M:Hassium.Lexer.Lexer.Tokenize">
            <summary>
            Tokenize this instance.
            </summary>
        </member>
        <member name="M:Hassium.Lexer.Lexer.ScanComment(System.Boolean)">
            <summary>
                Scans Comment
            </summary>
        </member>
        <member name="M:Hassium.Lexer.Lexer.ScanString(System.Boolean)">
            <summary>
                Scans the string.
            </summary>
            <returns>The string.</returns>
            <param name="isVerbatim">If set to <c>true</c> the string is verbatim (no escape sequences).</param>
        </member>
        <member name="M:Hassium.Lexer.Lexer.ScanNumber">
            <summary>
                Scans a number
            </summary>
            <returns>The number token</returns>
        </member>
        <member name="M:Hassium.Lexer.Lexer.ScanIdentifier">
            <summary>
                Scans an identifier
            </summary>
            <returns>The identifier</returns>
        </member>
        <member name="T:Hassium.Parser.AstNode">
            <summary>
            Class for a node on the Abstract Syntax Tree.
            </summary>
        </member>
        <member name="P:Hassium.Parser.AstNode.Children">
            <summary>
            The sub-nodes in the AST.
            </summary>
        </member>
        <member name="P:Hassium.Parser.AstNode.Position">
            <summary>
            The current position in the code.
            </summary>
        </member>
        <member name="P:Hassium.Parser.AstNode.CanBeIndexed">
            <summary>
            Returns if the node is one that can be indexed.
            </summary>
        </member>
        <member name="P:Hassium.Parser.AstNode.ReturnsValue">
            <summary>
            Returns if the node is a return value;
            </summary>
        </member>
        <member name="M:Hassium.Parser.AstNode.Any(System.Func{Hassium.Parser.AstNode,System.Boolean})">
            <summary>
            Returns if there are any children in the AST.
            </summary>
            <param name="fc"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Hassium.Parser.AstNode.Visit(Hassium.Interpreter.IVisitor)">
            <summary>
            Visits the current node.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Hassium.Parser.AstNode.VisitChild(Hassium.Interpreter.IVisitor)">
            <summary>
            Visits the children of the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Hassium.Parser.AstNode.CanBeModified">
            <summary>
            Return if the node can be modified.
            </summary>
        </member>
        <member name="M:Hassium.Parser.AstNode.#ctor">
            <summary>
            Initializes a new AstNode using -1 as the position.
            </summary>
        </member>
        <member name="M:Hassium.Parser.AstNode.#ctor(System.Int32)">
            <summary>
            Initializes a new AstNode using position.
            </summary>
            <param name="position"></param>
        </member>
        <member name="T:Hassium.Parser.Parser">
            <summary>
            Class for the Parser.
            </summary>
        </member>
        <member name="M:Hassium.Parser.Parser.#ctor(System.Collections.Generic.List{Hassium.Lexer.Token},System.String)">
            <summary>
            Initializes a new Parser using the list of tokens and code.
            </summary>
            <param name="tokens"></param>
            <param name="code"></param>
        </member>
        <member name="M:Hassium.Parser.Parser.Parse">
            <summary>
                ParseStatement this instance.
            </summary>
        </member>
        <member name="M:Hassium.Parser.Parser.CurrentToken">
            <summary>
            Returns the current token.
            </summary>
            <returns>Token</returns>
        </member>
        <member name="M:Hassium.Parser.Parser.PreviousToken(System.Int32)">
            <summary>
            Returns the previous token or further tokens from delay.
            </summary>
            <param name="delay"></param>
            <returns>Token</returns>
        </member>
        <member name="M:Hassium.Parser.Parser.MatchToken(Hassium.Lexer.TokenType)">
            <summary>
            Returns if the current token's class is equal to clazz.
            </summary>
            <param name="clazz"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Hassium.Parser.Parser.MatchToken(Hassium.Lexer.TokenType,System.String)">
            <summary>
            Returns if the current token's class is equal to clazz and the current token's value is equal to value.
            </summary>
            <param name="clazz"></param>
            <param name="value"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Hassium.Parser.Parser.AcceptToken(Hassium.Lexer.TokenType)">
            <summary>
            Returns true and increments the position if the current token's class is equal to clazz.
            </summary>
            <param name="clazz"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Hassium.Parser.Parser.AcceptToken(Hassium.Lexer.TokenType,System.String)">
            <summary>
            Returns true and increments the position if the current token's class is equal to clazz and the current token's value is equal to value.
            </summary>
            <param name="clazz"></param>
            <param name="value"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Hassium.Parser.Parser.ExpectToken(Hassium.Lexer.TokenType,System.String)">
            <summary>
            Returns and increments the position of the tokens if the current token's class is equal to clazz
            and the the current token's value is equal to value, or throws an exception.
            </summary>
            <param name="clazz"></param>
            <param name="value"></param>
            <returns>Token</returns>
        </member>
        <member name="M:Hassium.Parser.Parser.ExpectToken(System.String,Hassium.Lexer.TokenType,System.String)">
            <summary>
            Returns and increments the position of the tokens if the current token's class is equal to clazz
            and the the current token's value is equal to value, or throws an exception with msg.
            </summary>
            <param name="msg"></param>
            <param name="clazz"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Hassium.Program">
            <summary>
            Main class.
            </summary>
        </member>
        <member name="T:Hassium.Program.options">
            <summary>
            Class containing compile time options.
            </summary>
        </member>
        <member name="M:Hassium.Program.Main(System.String[])">
            <summary>
            Main entry point of the program.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Hassium.Debug.Debug">
            <summary>
            Class for debugger output of compile time resources.
            </summary>
        </member>
        <member name="M:Hassium.Debug.Debug.PrintTokens(System.Collections.Generic.List{Hassium.Lexer.Token})">
            <summary>
                Prints the tokens.
            </summary>
            <param name="tokens">The list of tokens to print.</param>
        </member>
        <member name="T:Hassium.Semantics.SymbolTable">
            <summary>
            Class for the symbol table.
            </summary>
        </member>
        <member name="P:Hassium.Semantics.SymbolTable.Symbols">
            <summary>
            List of symbols.
            </summary>
        </member>
        <member name="P:Hassium.Semantics.SymbolTable.ChildScopes">
            <summary>
            Dictionary of LocalScopes and their names.
            </summary>
        </member>
        <member name="M:Hassium.Semantics.SymbolTable.#ctor">
            <summary>
            Initializes a new SymbolTable.
            </summary>
        </member>
        <member name="T:Hassium.Semantics.LocalScope">
            <summary>
            Class for the local scope.
            </summary>
        </member>
        <member name="P:Hassium.Semantics.LocalScope.Symbols">
            <summary>
            List of the symbols.
            </summary>
        </member>
        <member name="M:Hassium.Semantics.LocalScope.#ctor">
            <summary>
            Initializes a new LocalScope.
            </summary>
        </member>
        <member name="T:Hassium.Semantics.SemanticAnalyser">
            <summary>
            Class for the semantic analyser.
            </summary>
        </member>
        <member name="P:Hassium.Semantics.SemanticAnalyser.Code">
            <summary>
            The Abstract Syntax Tree.
            </summary>
        </member>
        <member name="M:Hassium.Semantics.SemanticAnalyser.#ctor(Hassium.Parser.AstNode)">
            <summary>
            Initializes an new SemanticAnalyser using code.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Hassium.Semantics.SemanticAnalyser.Analyse">
            <summary>
            Analyses the AST.
            </summary>
            <returns>SymbolTable</returns>
        </member>
    </members>
</doc>
